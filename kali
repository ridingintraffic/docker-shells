#!/usr/bin/env bash
set -euo pipefail

help() {
  echo "$0:"
  echo "  usage:"
  echo "    amap "
  echo "    amap "
  echo "    amap "
  echo "    amap "
  echo "    msfconsole "
  echo "    nmap "
  echo "    padbuster "
  echo "    reaver "
  echo "    responder "
  echo "    sqlmap "

  exit 2
}



if [ "$1" == "-h" ] || [ "$1" == "--help" ] || [ "$1" == "help" ]; then
  help
  exit 0

fi


IMAGE_NAME=${IMAGE_NAME:-booyaabes/kali-linux-full}
IMAGE_VERSION=${IMAGE_VERSION:-latest}
WORK_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../" && pwd)"

#[[ -d "${HOME}/.something" ]] && volumes+=(--volume ${HOME}/.something:/root/.something)

env+=(--env TMPDIR=/tmp)


env+=(--env HTTP_PROXY="$http_proxy")
env+=(--env HTTPS_PROXY="$http_proxy")
env+=(--env PYTHONHTTPSVERIFY=0)
env+=(--env CURL_CA_BUNDLE="")


# using --tty causes output to use CRLF line endings, which is problematic
# when trying to handle the output programmatically. so we only request
# a tty if both stdin _and_ stdout are already ttys.
# https://github.com/moby/moby/issues/8513
_flags="--interactive"
[[ -t 0 && -t 1 ]] && _flags="${_flags} --tty"

# env or volumes may be an empty array which bash treats as unset
set +u

exec docker run \
  --rm \
  ${_flags} \
  "${volumes[@]}" \
  "${env[@]}" \
  "${IMAGE_NAME}:${IMAGE_VERSION}" \
  "$@"

